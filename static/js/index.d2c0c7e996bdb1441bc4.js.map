{"version":3,"sources":["/home/travis/build/firstclasspostcodes/geohash/docs/embeds/contains.js","/home/travis/build/firstclasspostcodes/geohash/docs/embeds/ranges.js","/home/travis/build/firstclasspostcodes/geohash/docs/embeds/simpleKey.js","/home/travis/build/firstclasspostcodes/geohash/docs/embeds/query.js","/home/travis/build/firstclasspostcodes/geohash/docs/index.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","alt","src","source","simpleKey","nodeVersion","contains","ranges","query","isMDXComponent"],"mappings":"2VAAc,8YCAA,uTCAA,kSCAA,kgB,sCCWd,IAKMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,WADR,WAGA,qBAAG,+BAAGC,WAAW,KAAQ,CACrB,KAAQ,+DACP,mBAAKC,IAAI,MAAMC,IAAI,8CAFxB,IAE8E,+BAAGF,WAAW,KAAQ,CAChG,KAAQ,2BACP,mBAAKC,IAAI,yBAAyBC,IAAI,sEAJ3C,IAIyH,+BAAGF,WAAW,KAAQ,CAC3I,KAAQ,sDACP,mBAAKC,IAAI,eAAeC,IAAI,yEANjC,IAMkH,+BAAGF,WAAW,KAAQ,CACpI,KAAQ,4BACP,mBAAKC,IAAI,oBAAoBC,IAAI,mEARtC,IAQiH,+BAAGF,WAAW,KAAQ,CACnI,KAAQ,sDACP,mBAAKC,IAAI,UAAUC,IAAI,sFAC5B,wLAAuK,+BAAGF,WAAW,KAAQ,CACzL,KAAQ,gGAD2J,2BAAvK,iDAEsF,+BAAGA,WAAW,KAAQ,CACxG,KAAQ,6CAD0E,wBAFtF,8BAKA,iBAAQ,CACN,GAAM,WADR,WAGA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,gDAEL,iBAAQ,CACN,GAAM,OADR,OAGA,wEACA,YAAC,IAAD,CAAOG,OAAQC,EAAWC,YAAY,KAAKN,QAAQ,UACnD,gEAA+C,kBAAIC,WAAW,KAAf,cAA/C,MAA4F,0BAAYA,WAAW,KAAvB,UAA5F,SAAwJ,kBAAIA,WAAW,KAAf,gBAAxJ,KAAsM,0BAAYA,WAAW,KAAvB,YAAtM,kFACA,uBACA,iBAAQ,CACN,GAAM,eADR,eAGA,iRACA,YAAC,IAAD,CAAOG,OAAQG,EAAUD,YAAY,KAAKN,QAAQ,UAClD,uMACA,YAAC,IAAD,CAAOI,OAAQI,EAAQF,YAAY,KAAKN,QAAQ,UAChD,uIAAsH,+BAAGC,WAAW,KAAQ,CACxI,KAAQ,gGAD0G,kBAAtH,0BAGA,uBACA,iBAAQ,CACN,GAAM,SADR,SAGA,yIAAwH,0BAAYA,WAAW,KAAvB,+BAAxH,+EAA+Q,0BAAYA,WAAW,KAAvB,0BAA/Q,OACA,0GAAyF,0BAAYA,WAAW,KAAvB,kBAAzF,KACA,YAAC,IAAD,CAAOG,OAAQK,EAAOH,YAAY,KAAKN,QAAQ,UAC/C,4BAAW,0BAAYC,WAAW,KAAvB,aAAX,8BAA+F,0BAAYA,WAAW,KAAvB,aAA/F,QAA6J,0BAAYA,WAAW,KAAvB,aAA7J,qBAAwO,0BAAYA,WAAW,KAAvB,UAAxO,c,oKAKJJ,EAAWa,gBAAiB","file":"static/js/index.c907ead3.js","sourcesContent":["export default `\nconst { BoundingBox } = require('@firstclasspostcodes/geohash');\n\nconst center = { latitude: 48.97415, longitude: -13.94988 };\n\n// ~50km due east\nconst location = { latitude: 49.0009, longitude: -13.333 };\n\n// create a bounding box with a radius 50km\nconst box = new BoundingBox(center.latitude, center.longitude, 50 * 1000);\n\nbox.contains(location.latitude, location.longitude);\n`;","export default `\nconst { BoundingBox } = require('@firstclasspostcodes/geohash');\n\nconst center = { latitude: 48.97415, longitude: -13.94988 };\n\n// create a bounding box with a radius 50km\nconst box = new BoundingBox(center.latitude, center.longitude, 50 * 1000);\n\nconst ranges = box.hashRanges(7);\n\nranges[0];\n`;","export default `\nconst { Key } = require('@firstclasspostcodes/geohash');\n\nconst center = { latitude: 48.97415, longitude: -13.94988 };\n\n// create our hash key\nconst key = Key.fromDegrees(center);\n\n// set a key length (7 is best for 1km);\nconst keyLength = 7;\n\nkey.toKeyObject(keyLength);\n`;","export default `\nconst { Query } = require('@firstclasspostcodes/geohash');\nconst { DynamoDB } = require('aws-sdk');\n\nconst docClient = new DynamoDB.DocumentClient({\n  service: new DynamoDB({ region: process.env.AWS_REGION }),\n  params: {\n    TableName: process.env.MY_TABLE,\n    IndexName: process.env.POINT_INDEX_NAME,\n  },\n});\n\nconst center = { latitude: 48.97415, longitude: -13.94988 };\n\nconst query = new Query(docClient);\n\n// find matching points up to 50km away\nawait query.find(center, 50 * 1000);\n`;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport Embed from 'react-runkit'\nimport contains from './embeds/contains';\nimport ranges from './embeds/ranges';\nimport simpleKey from './embeds/simpleKey';\nimport query from './embeds/query';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"geohash\"\n    }}>{`Geohash`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/@firstclasspostcodes/geohash\"\n      }}><img alt=\"NPM\" src=\"https://img.shields.io/npm/v/geohash.svg\" /></a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://standardjs.com\"\n      }}><img alt=\"JavaScript Style Guide\" src=\"https://img.shields.io/badge/code_style-standard-brightgreen.svg\" /></a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://travis-ci.org/firstclasspostcodes/geohash\"\n      }}><img alt=\"Build Status\" src=\"https://travis-ci.org/firstclasspostcodes/geohash.svg?branch=master\" /></a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://greenkeeper.io/\"\n      }}><img alt=\"Greenkeeper badge\" src=\"https://badges.greenkeeper.io/firstclasspostcodes/geohash.svg\" /></a>{` `}<a parentName=\"p\" {...{\n        \"href\": \"https://codecov.io/gh/firstclasspostcodes/geohash\"\n      }}><img alt=\"codecov\" src=\"https://codecov.io/gh/firstclasspostcodes/geohash/branch/master/graph/badge.svg\" /></a></p>\n    <p>{`At Firstclasspostcodes, we use geohashes inside DynamoDB to quickly retrieve matching postcodes for a particular coordinate. Our solution has been adapted from `}<a parentName=\"p\" {...{\n        \"href\": \"https://aws.amazon.com/blogs/mobile/geo-library-for-amazon-dynamodb-part-1-table-structure/\"\n      }}>{`this original blog post`}</a>{` and we've extracted some of the code from an `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/rh389/dynamodb-geo.js\"\n      }}>{`existing NPM library`}</a>{` to suit our own purposes.`}</p>\n    <h2 {...{\n      \"id\": \"install\"\n    }}>{`Install`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`npm i @firstclasspostcodes/geohash --save\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"key\"\n    }}>{`Key`}</h2>\n    <p>{`We can construct a hash key with the following:`}</p>\n    <Embed source={simpleKey} nodeVersion=\"11\" mdxType=\"Embed\" />\n    <p>{`This products an object consisting of a `}<em parentName=\"p\">{`\"hash key\"`}</em>{`  (`}<inlineCode parentName=\"p\">{`geokey`}</inlineCode>{`) and `}<em parentName=\"p\">{`\"hash range\"`}</em>{` (`}<inlineCode parentName=\"p\">{`georange`}</inlineCode>{`). This is enough to start storing points, ready for querying within DynamoDB!`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"boundingbox\"\n    }}>{`BoundingBox`}</h2>\n    <p>{`Let's start testing bounding boxes by determining if a specific point is contained within the matching area of another point. A bounding box is used to produce all the matching geohash ranges for querying points within DynamoDB (or another client).`}</p>\n    <Embed source={contains} nodeVersion=\"11\" mdxType=\"Embed\" />\n    <p>{`Once a bounding box for a particular center has been constructed, its possible to produce the hash ranges (at a configurable key length) that can be marshalled into requests.`}</p>\n    <Embed source={ranges} nodeVersion=\"11\" mdxType=\"Embed\" />\n    <p>{`The length of the \"hash key\" to adopt depends on the data and types of queries you need to work with. Refer to `}<a parentName=\"p\" {...{\n        \"href\": \"https://aws.amazon.com/blogs/mobile/geo-library-for-amazon-dynamodb-part-1-table-structure/\"\n      }}>{`this blog post`}</a>{` for more information.`}</p>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"query\"\n    }}>{`Query`}</h2>\n    <p>{`Querying for matching points is relatively trivial, but only supports DynamoDB currently. It uses an instance of `}<inlineCode parentName=\"p\">{`AWS.DynamoDB.DocumentClient`}</inlineCode>{` to execute all the necessary queries (a query for each tuple returned from `}<inlineCode parentName=\"p\">{`BoundingBox#hashRanges`}</inlineCode>{`). `}</p>\n    <p>{`Lets take a look at an example below, which provides a pre-configured instance of `}<inlineCode parentName=\"p\">{`DocumentClient`}</inlineCode>{`.`}</p>\n    <Embed source={query} nodeVersion=\"11\" mdxType=\"Embed\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`docClient`}</inlineCode>{` is configured to send the `}<inlineCode parentName=\"p\">{`TableName`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`IndexName`}</inlineCode>{` along with every `}<inlineCode parentName=\"p\">{`#query`}</inlineCode>{` request.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}